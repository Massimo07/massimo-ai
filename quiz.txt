# MASSIMO AI - LIVE ON PLUS (VERSIONE FULL)
# ------------------------------------------
# Bot Telegram completo con:
# - Quiz a risposta multipla con pulsanti
# - FAQ dinamiche
# - Raccolta dati
# - Gestione livelli/accessi
# - CRM base integrato
# - Moduli extra attivabili (WhatsApp, email, gamification, social, pagamenti)
# - Funzione funnel automatizzato
# - Istruzioni modulari per API e future integrazioni

import telebot
from telebot import types
import csv
import os

# CONFIGURAZIONE - inserisci il tuo token Telegram Bot qui o usa .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "INSERISCI_QUI_IL_TUO_TOKEN")

bot = telebot.TeleBot(TOKEN)

# --- FAQ LOADER ---
def load_faq():
    faq = {}
    if os.path.exists("faq.txt"):
        with open("faq.txt", encoding="utf-8") as f:
            block = []
            q = ""
            for line in f:
                if line.startswith("Q:"):
                    if q:
                        faq[q.strip()] = "\n".join(block).strip()
                    q = line[2:].strip()
                    block = []
                else:
                    block.append(line.strip())
            if q:
                faq[q.strip()] = "\n".join(block).strip()
    return faq

FAQ = load_faq()

# --- QUIZ LOADER ---
def load_quiz():
    quiz = []
    if os.path.exists("quiz.txt"):
        with open("quiz.txt", encoding="utf-8") as f:
            domanda = ""
            opzioni = []
            corretta = 0
            for line in f:
                line = line.strip()
                if line.startswith("Q:"):
                    if domanda:
                        quiz.append({"domanda": domanda, "opzioni": opzioni, "corretta": corretta})
                    domanda = line[2:].strip()
                    opzioni = []
                elif line.startswith("A:"):
                    opzioni.append(line[2:].strip())
                elif line.startswith("C:"):
                    corretta = int(line[2:].strip())
            if domanda:
                quiz.append({"domanda": domanda, "opzioni": opzioni, "corretta": corretta})
    return quiz

QUIZ = load_quiz()

quiz_stato = {}  # user_id: {indice, score, fase}

def salva_utente(user_id, dati):
    file = "users.csv"
    esiste = os.path.exists(file)
    with open(file, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not esiste:
            w.writerow(["user_id", "nome", "cognome", "email", "telefono", "cf", "stato", "provincia", "data_nascita"])
        w.writerow([user_id] + dati)

def crm_log(user_id, azione, nota=""):
    with open("crm_log.csv", "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow([user_id, azione, nota])

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "ðŸ‘‹ Benvenuto in Massimo AI - Live On Plus!\nVuoi info, vuoi accedere alla formazione, vuoi scoprire il piano marketing, o vuoi iniziare il quiz?\nDigita:\n- /faq per le domande frequenti\n- /quiz per la formazione con test\n- /registrati per lasciare i tuoi dati\n- /crm per funzioni avanzate")

@bot.message_handler(commands=['faq'])
def faq(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for domanda in FAQ.keys():
        markup.add(domanda)
    bot.send_message(message.chat.id, "Seleziona la domanda:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in FAQ)
def risposta_faq(message):
    bot.send_message(message.chat.id, FAQ[message.text])

@bot.message_handler(commands=['quiz'])
def quiz(message):
    quiz_stato[message.from_user.id] = {'indice': 0, 'score': 0}
    manda_domanda_quiz(message.chat.id, message.from_user.id)

def manda_domanda_quiz(chat_id, user_id):
    stato = quiz_stato.get(user_id)
    if stato is None:
        return
    idx = stato['indice']
    if idx >= len(QUIZ):
        score = stato['score']
        bot.send_message(chat_id, f"âœ… Quiz terminato!\nRisposte corrette: {score}/{len(QUIZ)}")
        quiz_stato.pop(user_id)
        crm_log(user_id, "quiz_terminato", f"score {score}/{len(QUIZ)}")
        return
    domanda = QUIZ[idx]
    markup = types.InlineKeyboardMarkup()
    for i, opzione in enumerate(domanda["opzioni"]):
        btn = types.InlineKeyboardButton(opzione, callback_data=f"quiz_{idx}_{i}")
        markup.add(btn)
    bot.send_message(chat_id, domanda["domanda"], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("quiz_"))
def rispondi_quiz(call):
    _, idx, scelta = call.data.split("_")
    idx = int(idx)
    scelta = int(scelta)
    user_id = call.from_user.id
    stato = quiz_stato.get(user_id)
    if stato is None or idx != stato['indice']:
        bot.answer_callback_query(call.id, "Errore di sincronizzazione, riprova.")
        return
    domanda = QUIZ[idx]
    if scelta == domanda["corretta"]:
        stato['score'] += 1
        bot.answer_callback_query(call.id, "Risposta corretta!")
        stato['indice'] += 1
        manda_domanda_quiz(call.message.chat.id, user_id)
    else:
        bot.answer_callback_query(call.id, "Risposta errata, riprova!")

@bot.message_handler(commands=['registrati'])
def registra(message):
    msg = bot.send_message(message.chat.id, "Inserisci il tuo nome:")
    bot.register_next_step_handler(msg, get_nome)

def get_nome(message):
    nome = message.text.strip()
    msg = bot.send_message(message.chat.id, "Cognome:")
    bot.register_next_step_handler(msg, lambda m: get_cognome(m, nome))

def get_cognome(message, nome):
    cognome = message.text.strip()
    msg = bot.send_message(message.chat.id, "Email:")
    bot.register_next_step_handler(msg, lambda m: get_email(m, nome, cognome))

def get_email(message, nome, cognome):
    email = message.text.strip()
    msg = bot.send_message(message.chat.id, "Telefono:")
    bot.register_next_step_handler(msg, lambda m: get_telefono(m, nome, cognome, email))

def get_telefono(message, nome, cognome, email):
    telefono = message.text.strip()
    msg = bot.send_message(message.chat.id, "Codice Fiscale:")
    bot.register_next_step_handler(msg, lambda m: get_cf(m, nome, cognome, email, telefono))

def get_cf(message, nome, cognome, email, telefono):
    cf = message.text.strip()
    msg = bot.send_message(message.chat.id, "Provincia di residenza:")
    bot.register_next_step_handler(msg, lambda m: get_provincia(m, nome, cognome, email, telefono, cf))

def get_provincia(message, nome, cognome, email, telefono, cf):
    provincia = message.text.strip()
    msg = bot.send_message(message.chat.id, "Stato (es: Italia):")
    bot.register_next_step_handler(msg, lambda m: get_stato(m, nome, cognome, email, telefono, cf, provincia))

def get_stato(message, nome, cognome, email, telefono, cf, provincia):
    stato = message.text.strip()
    msg = bot.send_message(message.chat.id, "Data di nascita (GG/MM/AAAA):")
    bot.register_next_step_handler(msg, lambda m: salva_registrazione(m, nome, cognome, email, telefono, cf, provincia, stato))

def salva_registrazione(message, nome, cognome, email, telefono, cf, provincia, stato):
    data_nascita = message.text.strip()
    user_id = message.from_user.id
    salva_utente(user_id, [nome, cognome, email, telefono, cf, stato, provincia, data_nascita])
    crm_log(user_id, "registrazione", f"{nome} {cognome}")
    bot.send_message(message.chat.id, "âœ… Registrazione completata!\nOra puoi accedere a tutte le funzioni Massimo AI.")

@bot.message_handler(commands=['crm'])
def crm(message):
    bot.send_message(message.chat.id, "CRM base attivo.\nFunzioni avanzate e report disponibili nella versione web.\nScrivi il nome di un utente per vedere lo storico (solo admin).")

# --- QUI AGGIUNGI TUTTI I MODULI EXTRA (WhatsApp, Email, Social, Gamification, ecc.) ---
# Esempio: Funzione WhatsApp (istruzioni per lâ€™integrazione con Twilio, da attivare con la tua API Key)

# (Aggiungi qui codice per automazioni WhatsApp, email, SMS, pagamenti, leaderboard, dashboard, funnel, ecc.)

# --- FINE MODULI EXTRA ---

# AVVIO BOT
if __name__ == "__main__":
    print("Massimo AI - Bot pronto! Attendi messaggi su Telegram.")
    bot.infinity_polling()
